// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Stream<int> tick({dynamic hint});

  Future<void> connect({required ConnectionInfo info, dynamic hint});

  Future<Platform> platform({dynamic hint});

  Future<bool> rustReleaseMode({dynamic hint});
}

class ConnectionInfo {
  final int port;
  final String url;

  ConnectionInfo({
    required this.port,
    required this.url,
  });
}

enum Platform {
  Unknown,
  Android,
  Ios,
  Windows,
  Unix,
  MacIntel,
  MacApple,
  Wasm,
}

class NativeImpl extends FlutterRustBridgeBase<NativeWire> implements Native {
  factory NativeImpl(ffi.DynamicLibrary dylib) =>
      NativeImpl.raw(NativeWire(dylib));

  NativeImpl.raw(NativeWire inner) : super(inner);

  Stream<int> tick({dynamic hint}) => executeStream(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_tick(port_),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "tick",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<void> connect({required ConnectionInfo info, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_connect(
            port_, _api2wire_box_autoadd_connection_info(info)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "connect",
          argNames: ["info"],
        ),
        argValues: [info],
        hint: hint,
      ));

  Future<Platform> platform({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_platform(port_),
        parseSuccessData: _wire2api_platform,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "platform",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<bool> rustReleaseMode({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_rust_release_mode(port_),
        parseSuccessData: _wire2api_bool,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "rust_release_mode",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_ConnectionInfo> _api2wire_box_autoadd_connection_info(
      ConnectionInfo raw) {
    final ptr = inner.new_box_autoadd_connection_info();
    _api_fill_to_wire_connection_info(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_connection_info(
      ConnectionInfo apiObj, ffi.Pointer<wire_ConnectionInfo> wireObj) {
    _api_fill_to_wire_connection_info(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_connection_info(
      ConnectionInfo apiObj, wire_ConnectionInfo wireObj) {
    wireObj.port = _api2wire_u16(apiObj.port);
    wireObj.url = _api2wire_String(apiObj.url);
  }
}

// Section: wire2api
bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

Platform _wire2api_platform(dynamic raw) {
  return Platform.values[raw];
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_tick(
    int port_,
  ) {
    return _wire_tick(
      port_,
    );
  }

  late final _wire_tick_ptr =
      _lookup<ffi.NativeFunction<_c_wire_tick>>('wire_tick');
  late final _dart_wire_tick _wire_tick =
      _wire_tick_ptr.asFunction<_dart_wire_tick>();

  void wire_connect(
    int port_,
    ffi.Pointer<wire_ConnectionInfo> info,
  ) {
    return _wire_connect(
      port_,
      info,
    );
  }

  late final _wire_connect_ptr =
      _lookup<ffi.NativeFunction<_c_wire_connect>>('wire_connect');
  late final _dart_wire_connect _wire_connect =
      _wire_connect_ptr.asFunction<_dart_wire_connect>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platform_ptr =
      _lookup<ffi.NativeFunction<_c_wire_platform>>('wire_platform');
  late final _dart_wire_platform _wire_platform =
      _wire_platform_ptr.asFunction<_dart_wire_platform>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_mode_ptr =
      _lookup<ffi.NativeFunction<_c_wire_rust_release_mode>>(
          'wire_rust_release_mode');
  late final _dart_wire_rust_release_mode _wire_rust_release_mode =
      _wire_rust_release_mode_ptr.asFunction<_dart_wire_rust_release_mode>();

  ffi.Pointer<wire_ConnectionInfo> new_box_autoadd_connection_info() {
    return _new_box_autoadd_connection_info();
  }

  late final _new_box_autoadd_connection_info_ptr =
      _lookup<ffi.NativeFunction<_c_new_box_autoadd_connection_info>>(
          'new_box_autoadd_connection_info');
  late final _dart_new_box_autoadd_connection_info
      _new_box_autoadd_connection_info = _new_box_autoadd_connection_info_ptr
          .asFunction<_dart_new_box_autoadd_connection_info>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_list_ptr =
      _lookup<ffi.NativeFunction<_c_new_uint_8_list>>('new_uint_8_list');
  late final _dart_new_uint_8_list _new_uint_8_list =
      _new_uint_8_list_ptr.asFunction<_dart_new_uint_8_list>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStruct_ptr =
      _lookup<ffi.NativeFunction<_c_free_WireSyncReturnStruct>>(
          'free_WireSyncReturnStruct');
  late final _dart_free_WireSyncReturnStruct _free_WireSyncReturnStruct =
      _free_WireSyncReturnStruct_ptr
          .asFunction<_dart_free_WireSyncReturnStruct>();

  void store_dart_post_cobject(
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobject_ptr =
      _lookup<ffi.NativeFunction<_c_store_dart_post_cobject>>(
          'store_dart_post_cobject');
  late final _dart_store_dart_post_cobject _store_dart_post_cobject =
      _store_dart_post_cobject_ptr.asFunction<_dart_store_dart_post_cobject>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ConnectionInfo extends ffi.Struct {
  @ffi.Uint16()
  external int port;

  external ffi.Pointer<wire_uint_8_list> url;
}

typedef _c_wire_tick = ffi.Void Function(
  ffi.Int64 port_,
);

typedef _dart_wire_tick = void Function(
  int port_,
);

typedef _c_wire_connect = ffi.Void Function(
  ffi.Int64 port_,
  ffi.Pointer<wire_ConnectionInfo> info,
);

typedef _dart_wire_connect = void Function(
  int port_,
  ffi.Pointer<wire_ConnectionInfo> info,
);

typedef _c_wire_platform = ffi.Void Function(
  ffi.Int64 port_,
);

typedef _dart_wire_platform = void Function(
  int port_,
);

typedef _c_wire_rust_release_mode = ffi.Void Function(
  ffi.Int64 port_,
);

typedef _dart_wire_rust_release_mode = void Function(
  int port_,
);

typedef _c_new_box_autoadd_connection_info = ffi.Pointer<wire_ConnectionInfo>
    Function();

typedef _dart_new_box_autoadd_connection_info = ffi.Pointer<wire_ConnectionInfo>
    Function();

typedef _c_new_uint_8_list = ffi.Pointer<wire_uint_8_list> Function(
  ffi.Int32 len,
);

typedef _dart_new_uint_8_list = ffi.Pointer<wire_uint_8_list> Function(
  int len,
);

typedef _c_free_WireSyncReturnStruct = ffi.Void Function(
  WireSyncReturnStruct val,
);

typedef _dart_free_WireSyncReturnStruct = void Function(
  WireSyncReturnStruct val,
);

typedef DartPostCObjectFnType = ffi.Uint8 Function(
  ffi.Int64,
  ffi.Pointer<ffi.Void>,
);

typedef _c_store_dart_post_cobject = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);

typedef _dart_store_dart_post_cobject = void Function(
  ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnType>> ptr,
);
